fileTypes: [
  "sp"
]
foldingStartMarker: "(?i:(^\\.subckt|^\\.macro))\\b"
foldingStopMarker: "(?i:(^\\.ends|^.endm))\\b"
name: "Spice"
patterns: [
  {
    begin: "^.*$\\n?"
    beginCaptures:
      "0":
        name: "comment.line.spice"
    end: "(?=not)possible"
    patterns: [
      {
          include: "#numbers_"
      }
      {
          include: "#quoted"
      }
      {
          include: "#elemnts_"
      }
      {
          include: "#sweep_"
      }
      {
          include: "#source"
      }
      {
          include: "#operation"
      }
      {
          include: "#comments"
      }
      {
          include: "#parameters"
      }
      {
          include: "#lib"
      }
      {
          include: "#subckt"
      }

      {
        captures:
          "2":
            name: "variable.other.spice"
          "3":
            name: "variable.other.spice"
          "4":
            name: "constant.numeric.spice"
        match: "(?i:(^(Solver|#include|HeatSolverView|Atar)(\\w*)?))"
        name: "keyword.other.spice"
      }
    #   {
    #     captures:
    #       "2":
    #         name: "variable.other.spice"
    #       "3":
    #         name: "variable.other.spice"
    #       "4":
    #         name: "variable.other.spice"
    #       "5":
    #         name: "variable.other.spice"
    #       "6":
    #         name: "constant.numeric.spice"
    #     match: "(?i:(^e\\S*))(\\s+\\S+)?(\\s+\\S+)?(\\s+\\w+)?(\\s+\\w+)?(\\s+(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?(?i:(meg|m|u|n|p|f|g|t|k))?)?"
    #     name: "keyword.other.spice"
    #   }
    ]
  }
]
repository:
  comments:
      patterns:  [
          {
            match: "\\*.*"
            name: "comment.line.spice"
          }
      ]
  numbers_:
      patterns:  [
          {
            match: "\\b((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?(?i:(meg|m|u|n|p|f|g|t|k))?[sSva]?)\\b"
            name: "constant.numeric.spice"
          }
      ]
  quoted:
      patterns:  [
          {
            begin: "\""
            end: "\""
            name: "string.quoted.double.untitled"
            patterns: [
              {
                match: "\\\\."
                name: "constant.character.escape.untitled"
              }
            ]
          }
          {
            begin: "'"
            end: "'"
            name: "string.quoted.single.untitled"
            patterns: [
              {
                match: "\\\\."
                name: "constant.character.escape.untitled"
              }
            ]
          }
      ]
  sweep_:
      patterns:  [
          {
            match: "(?i:(^(\\s+)?\\.(tran|ac|op|dc|Solver)))\\b"
            name: "keyword.other.simulate.spice"
          }
          {
            match: "(?i:(sweep))"
            name: "support.function.spice"
          }
      ]
  elemnts_:
      patterns:  [
          {
            begin: "(?i:(^(\\s+)?[eghf]\\S*))"
            beginCaptures:
             "1":
                name: "keyword.other.elemnt.spice"
            end: "(^(\\s+)?(?!\\+))"
            name: "variable.other.spice"
            patterns: [
                {
                    include: "#numbers_"
                }
                {
                    include: "#parameters"
                }
                {
                    include: "#quoted"
                }
                {
                match: "(?i:(opamp|(poly|pwl)(\\(\\d+\\))?|aba))"
                name: "support.type.spice"
                }
            ]
          }
          {
            begin: "(?i:(^(\\s+)?[crlk]\\S*))"
            beginCaptures:
                "1":
                    name: "keyword.other.cplkg.spice"
            end: "(^(\\s+)?(?!\\+))"
            name: "variable.parameter.spice"
            patterns: [
                {
                match: "(\\s+\\S+)(\\s+\\S+)"
                name: "variable.other.spice"
                }
                {
                    include: "#numbers_"
                }
                {
                    include: "#parameters"
                }
            ]
          }
      ]
  lib:
      patterns:  [
          {
            captures:
                "1":
                  name: "keyword.other.spice"
            match: "(?i:((\\s+)?\\.lib))"
          }
          {
            captures:
              "1":
                name: "variable.other.spice"
            match: "(?i:\\.model)\\b(\\s+\\w+)?(\\s+\\w+)?"
            name: "keyword.other.spice"
          }
      ]
  source:
      patterns:  [
          {
            begin: "(?i:([vi]\\S+))"
            beginCaptures:
             "1":
                name: "keyword.other.elemnt.spice"
            end: "(^(\\s+)?(?!\\+))"
            name: "variable.other.spice"
            patterns:  [
              {
                  match: "(?i:(\\s(pwl|pulse|dc|ac|sin)))"
                  name: "keyword.other.spice"
              }
              {
                  include: "#numbers_"
              }
            ]
        }
      ]
  operation:
      patterns:  [
          {
            captures:
              "6":
                name: "keyword.other.spice"
            match: "(?i:(\\.((print|probe|pz|tf)(\\s+(tran|dc|ac))?)))"  #\\b\\s+(.+)"
            name: "keyword.other.spice"
          }
          {
            match: "(?i:(\\.(options?|param)))\\b\\s+(?i:(jobcontrol|model|laser|optconn|fiber|photodiode|ind_source))?"
            name: "keyword.other.spice"
          }
          {
            begin: "(?i:(\\.(meas|measure)\\s+(dc|ac|tran)\\s+(\\S+)))"
            beginCaptures:
                "1":
                    name:"keyword.other.spice"
                "2":
                    name:"keyword.other.spice"
                "3":
                    name:"variable.parameter.spice"
            end: "(^(\\s+)?(?!\\+))"
            patterns:[
                {
                include: "#numbers_"
                }
                {
                include: "#parameter"
                }
                {
                match: "(?i:((targ|trig|find|when|max|min|rms|pp|avg|deriv|derivative|err\\d?|integ|integral)\\b))"
                name: "support.function.spice"
                }
            ]
          }
      ]
  subckt:
      patterns: [
          {
            begin: "(?i:(\\.(subckt|macro)(\\s+\\S+)))"
            beginCaptures:
                "1":
                    name: "meta.other.ckt&model.spice"
                "2":
                    name: "entity.name.circuit.spice"
            end: "(^(\\s+)?(?!\\+))"
            patterns:  [
                {
                include: "#parameters"
                }
                {
                match: "\\s+\\S+"
                name: "variable.other.spice"
                }
            ]
          }
          {
            match: "(?i:(^(\\s+)?\\.(ends|endm)))"
            name: "keyword.other.spice"
          }
          {
            captures:
              "3":
                name: "variable.other.spice"
            match: "(?i:(^[xqmd]\\w*))\\b((\\s+\\w+)*)"
            name: "keyword.other.spice"
          }

      ]
  parameters:
      patterns:  [
          {
            captures:
              "1":
                name: "variable.parameter.spice"
              "4":
                name: "constant.numeric.spice"
            match: "\\b((?!dc|ac)\\w+)(\\s+)?=(\\s+)?((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?(?i:(meg|m|u|n|p|f|g|t|k))?)?"
          }
      ]
scopeName: "source.spice"
